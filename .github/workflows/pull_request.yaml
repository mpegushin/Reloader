name: Pull Request

on:
  pull_request_target:
    branches:
      - master
    paths:
      - '**'
      - '!.markdownlint.yaml'
      - '!.vale.ini'
      - '!Dockerfile-docs'
      - '!docs-nginx.conf'
      - '!docs/**'
      - '!theme_common'
      - '!theme_override'

env:
  DOCKER_FILE_PATH: Dockerfile
  DOCKER_UBI_FILE_PATH: Dockerfile.ubi
  KUBERNETES_VERSION: "1.19.0"
  KIND_VERSION: "0.17.0"
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build
    if: "! contains(toJSON(github.event.commits.*.message), '[skip-ci]')"
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        ref: ${{github.event.pull_request.head.sha}}

    # Setting up helm binary
    - name: Set up Helm
      uses: azure/setup-helm@v4

    - name: Helm chart unit tests
      uses: d3adb5/helm-unittest-action@v2
      with:
        charts: deployments/kubernetes/chart/reloader

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        check-latest: true
        cache: true

    - name: Install Dependencies
      run: |
        make install

    - name: Helm Lint
      run: |
        cd deployments/kubernetes/chart/reloader
        helm lint

    - name: Generate Tags
      id: generate_tag
      run: |
        sha=${{ github.event.pull_request.head.sha }}
        tag="SNAPSHOT-PR-${{ github.event.pull_request.number }}-${sha:0:8}"
        ubi_tag="SNAPSHOT-PR-${{ github.event.pull_request.number }}-UBI-${sha:0:8}"
        echo "GIT_TAG=$(echo ${tag})" >> $GITHUB_OUTPUT
        echo "GIT_UBI_TAG=$(echo ${ubi_tag})" >> $GITHUB_OUTPUT

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to ghcr registry
      uses: docker/login-action@v3
      with:
        registry: ${{env.REGISTRY}}
        username: ${{github.actor}}
        password: ${{secrets.GITHUB_TOKEN}}

    - name: Generate image repository path for ghcr registry
      run: |
        echo GHCR_IMAGE_REPOSITORY=${{env.REGISTRY}}/$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV

    - name: Build and Push Docker Image to ghcr registry
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ env.DOCKER_FILE_PATH  }}
        pull: true
        push: true
        build-args: BUILD_PARAMETERS=${{ env.BUILD_PARAMETERS }}
        cache-to: type=inline
        platforms: linux/amd64,linux/arm,linux/arm64
        tags: |
          ${{ env.GHCR_IMAGE_REPOSITORY }}:${{ steps.generate_tag.outputs.GIT_TAG }}
        labels: |
          org.opencontainers.image.source=${{ github.event.repository.clone_url }}
          org.opencontainers.image.created=${{ steps.prep.outputs.created }}
          org.opencontainers.image.revision=${{ github.sha }}

    - name: Run Snyk to check Docker image for vulnerabilities
      continue-on-error: false
      uses: mpegushin/actions/snyk-containers@main
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: |
          ${{ env.GHCR_IMAGE_REPOSITORY }}:${{ steps.generate_tag.outputs.GIT_TAG }}
        args: --sarif-file-output=snyk.sarif --file=Dockerfile --severity-threshold=high
      
    - name: Upload CVE result to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v2
      if: success() || failure()
      with:
        sarif_file: snyk.sarif
